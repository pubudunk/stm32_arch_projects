/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	// enable bus / memmanage and usage faults
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	*pSHCSR |= ((0x01 << 16) | (0x01 << 17) | (0x01 << 18));

	void (*some_func)(void);

	// 1. Arbitrary memory location for undefined memory address
	//some_func = (void *)0x20010001;
	//some_func();

	// 2. Devision by zero exception
	uint8_t val = 0;
	uint8_t div = 1/val;
	printf("%d\n",div);

    /* Loop forever */
	for(;;);
}

// fault handlers

void HardFault_Handler(void)
{
	printf("HardFault_Handler\n");
	while(1);	// hang here
}

void MemManage_Handler(void)
{
	printf("MemManage_Handler\n");
	while(1);	// hang here
}

void BusFault_Handler(void)
{
	printf("BusFault_Handler\n");
	while(1);	// hang here
}

// analyze the stack just before the exception
__attribute__ ((naked)) void UsageFault_Handler(void)
{
	__asm ("MRS r0, MSP");	// save the stack pointer to r0
	__asm ("B UsageFault_Handler_c"); // First argument to the called function is stored in r0 as per the spec

}

void UsageFault_Handler_c(uint32_t* pBaseStackFrame)
{
	uint32_t *pUFSR = (uint32_t *)0xE000ED2A;
	printf("UsageFault_Handler\n");
	printf("UFSR: %lX\n", *pUFSR & 0xFFFF);
	printf("pBaseStackFrame: %p\n",pBaseStackFrame);
	printf("Value of R0: %lX\n", pBaseStackFrame[0]);
	printf("Value of R1: %lX\n", pBaseStackFrame[1]);
	printf("Value of R2: %lX\n", pBaseStackFrame[2]);
	printf("Value of R3: %lX\n", pBaseStackFrame[3]);
	printf("Value of R12: %lX\n", pBaseStackFrame[4]);
	printf("Value of LR: %lX\n", pBaseStackFrame[5]);
	printf("Value of PC: %lX\n", pBaseStackFrame[6]);
	printf("Value of XPSR: %lX\n", pBaseStackFrame[7]);


	while(1); // hang here
}
