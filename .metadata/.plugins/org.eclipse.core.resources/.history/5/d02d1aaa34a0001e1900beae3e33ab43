/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "main.h"
#include "led.h"

void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);

void init_systick_timer(uint32_t tick_hz);
__attribute ((naked)) void init_sched_stack(uint32_t sched_top_of_stack);
void init_tasks_stack(void);
void enable_fault_handlers(void);
__attribute ((naked)) void switch_sp_to_psp(void);
void task_delay(uint32_t tick_count);


typedef struct {
	uint32_t psp_value;
	uint32_t block_count;
	uint8_t current_state;
	void (*task_handler)(void);
} TCB_t;

static TCB_t user_tasks[MAX_TASKS];

static uint8_t current_task = 1; //initialized to task
static uint32_t g_tick_count = 0;

int main(void)
{

	init_leds();

	enable_fault_handlers();

	init_sched_stack(SCHED_STACK_START);

	init_tasks_stack();

	switch_sp_to_psp();

	init_systick_timer(TICK_HZ);

	task1_handler();

    /* Loop forever */
	for(;;);
}

void idle_task(void)
{
	while(1);
}

void task1_handler(void)
{
	while(1)
	{
		led_on(RED_LED);
		task_delay(250);
		led_off(RED_LED);
		printf("task1_handler\n");
	}
}

void task2_handler(void)
{
	while(1)
	{
		led_on(GRN_LED);
		task_delay(500);
		led_off(GRN_LED);
		printf("task2_handler\n");
	}
}

void task3_handler(void)
{
	while(1)
	{
		task_delay(125);
		printf("task3_handler\n");
	}
}

void task4_handler(void)
{
	while(1)
	{
		task_delay(1000);
		printf("task4_handler\n");
	}
}

void schedule(void)
{
	// pend the pendsv handler
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
	*pICSR |= (0x01 << 28);
}

void task_delay(uint32_t tick_count)
{

	DISABLE_INTERRUPTS();	// since the TCB structure is accessed by both thraed mode and handler mode

	if(current_task) {
		user_tasks[current_task].block_count = g_tick_count + tick_count;
		user_tasks[current_task].current_state = TASK_STATE_BLOCKED;
		schedule();
	}

	ENABLE_INTERRUPTS();
}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSTCSR = (uint32_t*)0xE000E010;
	uint32_t *pSTRVR = (uint32_t*)0xE000E014;
	uint32_t *pSTCVR = (uint32_t*)0xE000E018;

	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;

	// set systick timer reload value register
	*pSTRVR &= ~(0x00FFFFFF);
	*pSTRVR = count_value;

	// clear current value register
	*pSTCVR &= ~(0x00FFFFFF);

	// program control and status register
	*pSTCSR |= (0x01 << 2); // use processor clock
	*pSTCSR |= (0x01 << 1); // Enables SysTick exception request
	*pSTCSR |= (0x01 << 0); // Enables the counter
}

__attribute ((naked)) void init_sched_stack(uint32_t sched_top_of_stack)
{
	__asm volatile ("MSR MSP, %0": : "r" (sched_top_of_stack):);
	__asm volatile ("BX LR");
}

void init_tasks_stack(void)
{
	uint32_t *pPSP = NULL;

	user_tasks[0].current_state = TASK_STATE_READY;
	user_tasks[1].current_state = TASK_STATE_READY;
	user_tasks[2].current_state = TASK_STATE_READY;
	user_tasks[3].current_state = TASK_STATE_READY;
	user_tasks[4].current_state = TASK_STATE_READY;

	user_tasks[0].psp_value = IDLE_STACK_START;
	user_tasks[1].psp_value = T1_STACK_START;
	user_tasks[2].psp_value = T2_STACK_START;
	user_tasks[3].psp_value = T3_STACK_START;
	user_tasks[4].psp_value = T4_STACK_START;

	user_tasks[0].task_handler = idle_task;
	user_tasks[1].task_handler = task1_handler;
	user_tasks[2].task_handler = task2_handler;
	user_tasks[3].task_handler = task3_handler;
	user_tasks[4].task_handler = task4_handler;

	for(int i = 0; i < MAX_TASKS ; i ++) {
		pPSP = (uint32_t *)user_tasks[i].psp_value;

		pPSP--;
		*pPSP = 0x01000000;	// xPSR

		pPSP--;
		*pPSP = (uint32_t)user_tasks[i].task_handler;	// Set the PC of each task handler

		pPSP--;
		*pPSP = 0xFFFFFFFD;		// Set LR with required EXC_RETURN

		// set zero to remainder of 13 GP registers
		for(int j = 0; j < 13 ; j++) {
			pPSP--;
			*pPSP = 0x00;
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
	}
}

void enable_fault_handlers(void)
{
	// enable bus / mem-manage and usage faults
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	*pSHCSR |= (0x01 << 16);	// mem-manager fault
	*pSHCSR |= (0x01 << 17);	// bus fault
	*pSHCSR |= (0x01 << 18);	// usage fault
}

uint32_t get_psp_value(void)
{
	return user_tasks[current_task].psp_value;
}

void set_psp_value(uint32_t current_psp)
{
	user_tasks[current_task].psp_value = current_psp;
}

void update_next_task(void)
{
	int state = TASK_STATE_BLOCKED;

	for(int i = 0; i < MAX_TASKS; i++) {
		current_task++;
		current_task %= MAX_TASKS;
		state = user_tasks[current_task].current_state;
		if( (state == TASK_STATE_READY) && (current_task != 0))
			break;
	}

	if(state != TASK_STATE_READY) {
		current_task = 0;
	}
}

__attribute ((naked)) void switch_sp_to_psp(void)
{
	// get the value of the psp of the current task
	__asm volatile ("PUSH {LR}");	// preserve the content of LR to return to main. otherwise LR will be overwritten by the BL instruction
	__asm volatile ("BL get_psp_value");
	__asm volatile ("MSR PSP, R0");
	__asm volatile ("POP {LR}");


	// change the SP to PSP in the CONTROL register
	__asm volatile ("MRS R0, CONTROL");
	__asm volatile ("ORR R0, R0, #0x02");	// change the SPSEL bit of CONTROl reg
	__asm volatile ("MSR CONTROL, R0");
	__asm volatile ("BX LR");
}

__attribute ((naked)) void PendSV_Handler(void)
{
	/** Save the context of the current task **/

	//1. Get the current task's PSP value
	__asm volatile ("MRS R0, PSP");
	//2. Using the PSP value store SF2 (R4-R11)
	__asm volatile ("STMDB R0!, {R4-R11}");
	//3. Save the current value of PSP
	__asm volatile ("PUSH {LR}"); 	// save LR before branching
	__asm volatile ("BL set_psp_value");


	/** Retrieve the context of the next task **/

	// decide the next task to run
	__asm volatile ("BL update_next_task");

	// get the next task's last psp
	__asm volatile ("BL get_psp_value");
	__asm volatile ("POP {LR}");	// update LR after last branch instruction

	// using the PSP retrieve the SR2 (R4-R11)
	__asm volatile ("LDMIA R0!, {R4-R11}");

	// update PSP and exit
	__asm volatile ("MSR PSP, R0");

	__asm volatile ("BX LR");
}


void update_global_tick_count(void)
{
	g_tick_count++;
}

void unblock_tasks(void)
{
	for(int i = 1; i < MAX_TASKS; i++)
	{
		if(user_tasks[i].current_state != TASK_STATE_READY) {
			if(user_tasks[i].block_count == g_tick_count) {
				user_tasks[i].current_state = TASK_STATE_READY;
			}
		}
	}
}

void SysTick_Handler(void)
{
	uint32_t *pICSR = (uint32_t*)0xE000ED04;

	update_global_tick_count();
	unblock_tasks();
	*pICSR |= (0x01 << 28);	// pend the pendsv handler
}


// implement fault handlers
void HardFault_Handler(void)
{
	printf("HardFault_Handler\n");
	while(1);	// hang here
}

void MemManage_Handler(void)
{
	printf("MemManage_Handler\n");
	while(1);	// hang here
}

void BusFault_Handler(void)
{
	uint32_t *pBFAR = (uint32_t*)0xE000ED34;
	printf("BusFault_Handler @ address: %lX\n", *pBFAR);
	while(1);	// hang here
}

void UsageFault_Handler(void)
{
	printf("UsageFault_Handler\n");
	while(1);	// hang here
}
